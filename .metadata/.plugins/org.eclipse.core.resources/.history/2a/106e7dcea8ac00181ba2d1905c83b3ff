package com.andreslab.prj.datapersistence.controllers;

import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.andreslab.prj.datapersistence.models.dao.IClienteDao;
import com.andreslab.prj.datapersistence.models.entity.Cliente;

@Controller
@SessionAttributes("cliente") //cuando termine la session SessionAttributes complete eliminara el objeto
public class ClienteController {
	
	@Autowired 
	@Qualifier("clienteDaoJPA") //se usa solo si la implementacion IClienteDao esta ligada a mas de una clase, de ahi en la clase en @repository se especifica el nombre
	private IClienteService clienteService; //autowired busca un componente que implemente IClienteDao
	
	@RequestMapping(value="/listar", method=RequestMethod.GET)
	public String listar(Model model) {
		model.addAttribute("titulo","Listado de clientes");
		model.addAttribute("clientes", clienteService.findAll());
		return "listar";
	}
	
	@RequestMapping(value="/form")
	public String crear(Map<String,Object> model) {
		//usamos Map<String, OBject> en vez de Model, es una alternativa
		
		Cliente cliente = new Cliente();
		model.put("cliente", cliente);
		model.put("titulo", "Formulario de cliente");
		return "form";
	}
	
	@RequestMapping(value="/form", method=RequestMethod.POST)
	public String guardar(@Valid Cliente cliente, BindingResult result, SessionStatus status) {
		//binding result ayuda a validar si posee errores
		//@Valid es para validar el objeto y que se cumplan las validaciones internas
		
		if(result.hasErrors()) {
			return "form";
		}
		clienteService.save(cliente);
		status.setComplete(); //buena practica
		return "redirect:listar"; //redireccionamos a la vista de listar
	}
	
	@RequestMapping(value="/form/{id}")
	public String editar(@PathVariable(value="id") Long id, Map<String, Object> model) {
		
		 Cliente cliente = null;
		 
		 if(id > 0) {
			 cliente = clienteService.findOne(id);
		 }else {
			 return "redirect:/listar";
		 }
		 model.put("cliente", cliente);
		return "form";
		
	}
	
	@RequestMapping(value="/eliminar/{id}")
	public String eliminar(@PathVariable(value="id") Long id) {
		if (id > 0) {
			clienteService.delete(id);
		}
		return "redirect:/listar";
	}
}
